{"version":3,"file":"cdk-tree.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/tree/tree-errors.ts","../../src/cdk/tree/control/base-tree-control.ts","../../src/cdk/tree/control/flat-tree-control.ts","../../src/cdk/tree/control/nested-tree-control.ts","../../src/cdk/tree/node.ts","../../src/cdk/tree/outlet.ts","../../src/cdk/tree/tree.ts","../../src/cdk/tree/nested-node.ts","../../src/cdk/tree/padding.ts","../../src/cdk/tree/toggle.ts","../../src/cdk/tree/tree-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => Observable<T[]>;\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(dataNode);\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(dataNode);\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(dataNode);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(dataNode);\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(dataNode)\n        ? this.collapseDescendants(dataNode)\n        : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(public getLevel: (dataNode: T) => number,\n              public isExpandable: (dataNode: T) => boolean) {\n    super();\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1;\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n        i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with nested tree function getChildren. */\n  constructor(public getChildren: (dataNode: T) => Observable<T[]>) {\n    super();\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants = [];\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    this.getChildren(dataNode).pipe(take(1)).subscribe(children => {\n      if (children && children.length > 0) {\n        children.forEach((child: T) => this._getDescendants(descendants, child));\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [\n    'when: cdkTreeNodeDefWhen'\n  ],\n})\nexport class CdkTreeNodeDef<T> {\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  /** @docs-private */\n  constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]'\n})\nexport class CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  TrackByFunction\n} from '@angular/core';\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getTreeControlFunctionsMissingError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError\n} from './tree-errors';\n\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CdkTree<T>\n    implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<T, number> = new Map<T, number>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a dara array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /** The tree controller */\n  @Input() treeControl: TreeControl<T>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange =\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  constructor(private _differs: IterableDiffers,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    let dataStream: Observable<T[]> | undefined;\n\n    // Cannot use `instanceof DataSource` since the data source could be a literal with\n    // `connect` function and may not extends DataSource.\n    if (typeof (this._dataSource as DataSource<T>).connect === 'function') {\n      dataStream = (this._dataSource as DataSource<T>).connect(this);\n    } else if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n        .subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data: T[], dataDiffer: IterableDiffer<T> = this._dataDiffer,\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n                    parentData?: T) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) { return; }\n\n    changes.forEachOperation(\n      (item: IterableChangeRecord<T>, adjustedPreviousIndex: number, currentIndex: number) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex);\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex);\n          viewContainer.move(view!, currentIndex);\n        }\n      });\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n    return nodeDef;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const node = this._getNodeDef(nodeData, index);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData)! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node',\n  },\n})\nexport class CdkTreeNode<T>  implements FocusableOption, OnDestroy {\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<{}> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** The tree node's data. */\n  get data(): T { return this._data; }\n  set data(value: T) {\n    this._data = value;\n    this._setRoleFromData();\n  }\n  protected _data: T;\n\n  get isExpanded(): boolean {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  get level(): number {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n\n  /**\n   * The role of the node should be 'group' if it's an internal node,\n   * and 'treeitem' if it's a leaf node.\n   */\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>) {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  private _setRoleFromData(): void {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n        .subscribe(children => {\n          this.role = children && children.length ? 'group' : 'treeitem';\n        });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  IterableDiffers,\n  IterableDiffer,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node cdk-nested-tree-node',\n  },\n  providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet) nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    this._tree.treeControl.getChildren(this.data).pipe(takeUntil(this._destroyed))\n        .subscribe(result => {\n          this._children = result;\n          this.updateChildrenNodes();\n        });\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(): void {\n    if (this.nodeOutlet.length && this._children) {\n      const viewContainer = this.nodeOutlet.first.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    if (this.nodeOutlet && this.nodeOutlet.first) {\n      this.nodeOutlet.first.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('cdkTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) {\n    this._level = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  // TODO(tinayuangao): Make indent working with a string with unit, e.g. 10em\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number { return this._indent; }\n  set indent(value: number) {\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _indent: number = 40;\n\n  constructor(private _treeNode: CdkTreeNode<T>,\n              private _tree: CdkTree<T>,\n              private _renderer: Renderer2,\n              private _element: ElementRef,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level || nodeLevel;\n    return level ? `${level * this._indent}px` : null;\n  }\n\n  _setPadding() {\n    const padding = this._paddingIndent();\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  Input,\n} from '@angular/core';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({\n  selector: '[cdkTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  }\n})\nexport class CdkTreeNodeToggle<T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T>,\n              protected _treeNode: CdkTreeNode<T>) {}\n\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {CdkTreeNodePadding} from './padding';\nimport {CdkTreeNodeToggle} from './toggle';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeDef} from './node';\nimport {CdkNestedTreeNode} from './nested-node';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkNestedTreeNode,\n  CdkTreeNodeDef,\n  CdkTreeNodePadding,\n  CdkTreeNodeToggle,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeOutlet,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","BaseTreeControl","expansionModel","SelectionModel","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","apply","getDescendants","_a","FlatTreeControl","_super","getLevel","isExpandable","_this","call","tslib_1.__extends","startIndex","dataNodes","indexOf","results","i","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","concat","descendants","_getDescendants","splice","pipe","take","subscribe","children","forEach","child","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","type","Directive","args","selector","inputs","TemplateRef","CdkTreeNodeOutlet","viewContainer","ViewContainerRef","CdkTree","_differs","_changeDetectorRef","_onDestroy","Subject","_levels","Map","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","defineProperty","_dataSource","dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","trackBy","treeControl","ngOnDestroy","_nodeOutlet","next","complete","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","filter","def","when","_defaultNodeDef","_observeRenderChanges","dataStream","connect","Observable","isArray","observableOf","takeUntil","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","set","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","ViewChild","ContentChildren","_tree","_setRoleFromData","enumerable","configurable","_destroyed","_data","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkNestedTreeNode","_elementRef","ngAfterContentInit","result","_children","updateChildrenNodes","nodeOutlet","_clear","providers","provide","useExisting","ElementRef","IterableDiffers","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","_indent","_setPadding","change","_level","value","coerceNumberProperty","_paddingIndent","nodeLevel","padding","paddingProp","setStyle","nativeElement","Renderer2","Directionality","decorators","Optional","indent","CdkTreeNodeToggle","_recursive","coerceBooleanProperty","_toggle","event","recursive","stopPropagation","(click)","EXPORTED_DECLARATIONS","NgModule","imports","CommonModule","exports","declarations","FocusMonitor","CdkTreeModule"],"mappings":"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"}